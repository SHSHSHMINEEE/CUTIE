from enum import Enum

# Enum for Delivery Method
class DeliveryMethod(Enum):
    COURIER = "Courier"
    EXPRESS = "Express"
    STANDARD = "Standard"

# Enum for Order Status
class OrderStatus(Enum):
    PENDING = "Pending"
    SHIPPED = "Shipped"
    DELIVERED = "Delivered"
    CANCELLED = "Cancelled"

# Enum for Delivery Status
class DeliveryStatus(Enum):
    NOT_DISPATCHED = "Not Dispatched"
    OUT_FOR_DELIVERY = "Out for Delivery"
    DELIVERED = "Delivered"
    FAILED_ATTEMPT = "Failed Attempt"
    RETURNED = "Returned"
    

# Class Customer
class Customer:
    def __init__(self, customerId, name, email, phoneNumber, address, orderHistory):
        self.__customerId = customerId
        self.__name = name
        self.__email = email
        self.__phoneNumber = phoneNumber
        self.__address = address
        self.__orderHistory = orderHistory

    # Getters and Setters
    def getCustomerId(self): 
        return self.__customerId
    def setCustomerId(self, customerId): 
        self.__customerId = customerId

    def getName(self): 
        return self.__name
    def setName(self, name): 
        self.__name = name

    def getEmail(self): 
        return self.__email
    def setEmail(self, email): 
        self.__email = email

    def getPhoneNumber(self): 
        return self.__phoneNumber
    def setPhoneNumber(self, phoneNumber): 
        self.__phoneNumber = phoneNumber

    def getAddress(self): 
        return self.__address
    def setAddress(self, address): 
        self.__address = address

    def getOrderHistory(self): 
        return self.__orderHistory
    def setOrderHistory(self, orderHistory): 
        self.__orderHistory = orderHistory

    def addOrderHistory(self, order):         # Adds an order to the customer's order history
        self.__orderHistory.append(order)
        return "Order added to history."

    def displayCustomerInfo(self): # Display's customers information
        print("-=Customer Information=-")
        print(f"Customer: {self.__name}")
        print(f"Email: {self.__email}")
        print(f"Phone: {self.__phoneNumber}")
        print(f"Address: {self.__address}")
        print(f"Order History: {self.__orderHistory}")

# Class Admin
class Admin:
    def __init__(self, adminId, name, email, phoneNumber, yearOfExperience, managedOrders):
        self.__adminId = adminId
        self.__name = name
        self.__email = email
        self.__phoneNumber = phoneNumber
        self.__yearOfExperience = yearOfExperience
        self.__managedOrders = managedOrders

    # Getters and Setters
    def getAdminId(self): 
        return self.__adminId
    def setAdminId(self, adminId): 
        self.__adminId = adminId

    def getName(self): 
        return self.__name
    def setName(self, name): 
        self.__name = name

    def getEmail(self): 
        return self.__email
    def setEmail(self, email): 
        self.__email = email

    def getPhoneNumber(self): 
        return self.__phoneNumber
    def setPhoneNumber(self, phoneNumber): 
        self.__phoneNumber = phoneNumber

    def getYearOfExperience(self): 
        return self.__yearOfExperience
    def setYearOfExperience(self, yearOfExperience): 
        self.__yearOfExperience = yearOfExperience

    def getManagedOrders(self): 
        return self.__managedOrders
    def setManagedOrders(self, managedOrders): 
        self.__managedOrders = managedOrders

    def generateReports(self): # Generates reports for admin
        pass 

    def displayAdminInfo(self): # Display's admin information
        print("-=Admin Information=-")
        print(f"Admin: {self.__name}")
        print(f"Email: {self.__email}")
        print(f"Phone: {self.__phoneNumber}")
        print(f"Experience { self.__yearOfExperience} years")
        print(f"Orders: {self.__managedOrders}")

# Class Delivery Staff
class DeliveryStaff:
    def __init__(self, staffId, name, email, phoneNumber, assignedDeliveries, status):
        self.__staffId = staffId
        self.__name = name
        self.__email = email
        self.__phoneNumber = phoneNumber
        self.__assignedDeliveries = assignedDeliveries
        self.__status = status

    # Getters and Setters
    def getStaffId(self): 
        return self.__staffId
    def setStaffId(self, staffId): 
        self.__staffId = staffId

    def getName(self): 
        return self.__name
    def setName(self, name): 
        self.__name = name

    def getEmail(self): 
        return self.__email
    def setEmail(self, email): 
        self.__email = email

    def getPhoneNumber(self): 
        return self.__phoneNumber
    def setPhoneNumber(self, phoneNumber): 
        self.__phoneNumber = phoneNumber

    def getAssignedDeliveries(self): 
        return self.__assignedDeliveries
    def setAssignedDeliveries(self, assignedDeliveries): 
        self.__assignedDeliveries = assignedDeliveries

    def getStatus(self): 
        return self.__status
    def setStatus(self, status): 
        self.__status = status

    def assignDelivery(self): # Assigns a delivery order to the delivery staff
        pass

    def updateDeliveryStatus(self):         
    # Updates the delivery status of an order
        pass

    def displayStaffInfo(self): #Display's Staff information
        print("-=Deliver Staff Information=-")
        print(f"Deliver Staff's Name: {self.__name}")
        print(f"Email: {self.__email}")
        print(f"Phone: {self.__phoneNumber}")
        print(f"Assigned deliveries: {self.__assignedDeliveries}")
        print(f"Status: {self.__status.value}")

# Class Order
class Order:
    def __init__(self, orderId, customerId, items, totalPrice, orderStatus, placedDate):
        self.__orderId = orderId
        self.__customerId = customerId
        self.__items = items
        self.__totalPrice = sum(item["price"] for item in items)  # Automatically calculate
        self.__orderStatus = orderStatus
        self.__placedDate = placedDate

    # Getters and Setters
    def getOrderId(self): 
        return self.__orderId
    def setOrderId(self, orderId): 
        self.__orderId = orderId

    def getCustomerId(self): 
        return self.__customerId
    def setCustomerId(self, customerId): 
        self.__customerId = customerId

    def getItems(self): 
        return self.__items
    def setItems(self, items): 
        self.__items = items

    def getTotalPrice(self): 
        return self.__totalPrice
    def setTotalPrice(self, totalPrice): 
        self.__totalPrice = totalPrice

    def getOrderStatus(self): 
        return self.__orderStatus
    def setOrderStatus(self, orderStatus): 
        self.__orderStatus = orderStatus

    def getPlacedDate(self): 
        return self.__placedDate
    def setPlacedDate(self, placedDate): 
        self.__placedDate = placedDate

    def calculateTotalPrice(self): # Calculates the total price of items in the order
        self.__totalPrice = sum(item['price'] for item in self.__items)
        return self.__totalPrice
    
    def addItem(self, item): # Adds an item to the order
        self.__items.append(item)
        return "Item added to order."

    def displayOrderInfo(self): # Display's Order information
        print("-=Order Information=-")
        print(f"Order ID: {self.__orderId}")
        print(f"Customer ID: {self.__customerId}")
        print(f"Items Purchased:")
        for item in self.__items:
            print(f"  - {item['name']}: {item['price']} AED")  # Display each item with price
            
        print(f"Total Price: {self.__totalPrice} AED") # Summing up all items
        print(f"Order Status: {self.__orderStatus.value}")
        print(f"Purchase Date: {self.__placedDate}")

# Class Delivery Note
class DeliveryNote:
    def __init__(self, orderNumber, referenceNumber, deliveryDate, deliveryMethod, totalWeight, totalPrice):
        self.__orderNumber = orderNumber
        self.__referenceNumber = referenceNumber
        self.__deliveryDate = deliveryDate
        self.__deliveryMethod = deliveryMethod
        self.__totalWeight = totalWeight
        self.__totalPrice = totalPrice

    # Getters and Setters
    def getOrderNumber(self): 
        return self.__orderNumber
    def setOrderNumber(self, orderNumber): 
        self.__orderNumber = orderNumber

    def getReferenceNumber(self): 
        return self.__referenceNumber
    def setReferenceNumber(self, referenceNumber): 
        self.__referenceNumber = referenceNumber

    def getDeliveryDate(self): 
        return self.__deliveryDate
    def setDeliveryDate(self, deliveryDate): 
        self.__deliveryDate = deliveryDate

    def getDeliveryMethod(self): 
        return self.__deliveryMethod
    def setDeliveryMethod(self, deliveryMethod): 
        self.__deliveryMethod = deliveryMethod

    def getTotalWeight(self): 
        return self.__totalWeight
    def setTotalWeight(self, totalWeight): 
        self.__totalWeight = totalWeight

    def getTotalPrice(self): 
        return self.__totalPrice
    def setTotalPrice(self, totalPrice): 
        self.__totalPrice = totalPrice

    def generateNote(self): # Generates a delivery note for the order
        return f"Delivery Note for Order {self.__orderNumber} generated successfully."

    def displayDeliveryNote(self): # Display's Delivery Note
        print("-=Delivery Note=-")
        print(f"Order Number: {self.__orderNumber}")
        print(f"Reference Number: {self.__referenceNumber}")
        print(f"Delivery Date: {self.__deliveryDate}")
        print(f"Delivery Method: {self.__deliveryMethod.value}")
        print(f"Total Weight: {self.__totalWeight} Kg")
        print(f"Total Price: {self.__totalPrice} AED")

# Creating Customer Objects
customer1 = Customer("C101", "Shamma Al Mansoori", "shamma.alm@gmail.com", "+971 50 124 6588", "Bain Al Jessrain, Abu Dhabi", "Order History 1")
customer2 = Customer("C102", "Mohammed Al Shamsi", "mohammed.als@yahoo.com", "+971 58 765 6771", "downtown, Dubai", "Order History 2")
  
# Creating Admin Objects
admin1 = Admin("A201", "Shoug Al Qubaisi", "shoug.alqq@company.com", "+971 50 112 2344", 5, "Managed Order 1")
admin2 = Admin("A202", "Shahad Al Marzooqi", "shahad@company.com", "+971 50 111 2445", 8, "Managed Order 2")
  
# Creating Delivery Staff Objects
staff1 = DeliveryStaff("S301", "Tareq Abdulla", "tareq@delivery.com", "+971 58 334 5256", "Delivery 1", DeliveryStatus.DELIVERED)
staff2 = DeliveryStaff("S302", "Mohammed Rashid", "mohammed@delivery.com", "+971 55 783 8429", "Delivery 2", DeliveryStatus.OUT_FOR_DELIVERY)
  
# Creating Order Objects
order1 = Order("O401", "C101", [
        {"name": "Laptop", "price": 5000.0},
        {"name": "Phone", "price": 3000.0}
    ], 8000, OrderStatus.SHIPPED, "2025-02-10")
order2 = Order("O402", "C102", [
        {"name": "Tablet", "price": 2500.0},
        {"name": "Headphones", "price": 1500.0}
    ],4000, OrderStatus.DELIVERED, "2025-02-18")
  
# Creating Delivery Note Objects
deliveryNote1 = DeliveryNote("DN501", "REF123", "2025-02-22", DeliveryMethod.COURIER, 5.0, 5500.00)
deliveryNote2 = DeliveryNote("DN502", "REF456", "2025-02-28", DeliveryMethod.EXPRESS, 3.0, 3500.00)
  
# Displaying Details of the Created Object 
print("---Object 1---")
print(" ")
customer1.displayCustomerInfo()
print(" ")
admin1.displayAdminInfo()
print(" ")
staff1.displayStaffInfo()
print(" ")
order1.displayOrderInfo()
print(" ")
deliveryNote1.displayDeliveryNote()
print(" ")

print("---Object 2---")
print(" ")
customer2.displayCustomerInfo()
print(" ")
admin2.displayAdminInfo()
print(" ")
staff2.displayStaffInfo()
print(" ")
order2.displayOrderInfo()
print(" ")
deliveryNote2.displayDeliveryNote()
    
